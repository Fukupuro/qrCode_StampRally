/* tslint:disable */
/* eslint-disable */
/**
 * QRコードスタンプラリーアプリケーション
 * QRコードスタンプラリーアプリケーションのAPI仕様書
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface DeleteUser200Response
 */
export interface DeleteUser200Response {
    /**
     * 
     * @type {string}
     * @memberof DeleteUser200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GetUserStamps200ResponseInner
 */
export interface GetUserStamps200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof GetUserStamps200ResponseInner
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserStamps200ResponseInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserStamps200ResponseInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserStamps200ResponseInner
     */
    'qr_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserStamps200ResponseInner
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserStamps200ResponseInner
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserStamps200ResponseInner
     */
    'is_collected'?: string;
}
/**
 * 
 * @export
 * @interface GetUsers400Response
 */
export interface GetUsers400Response {
    /**
     * 
     * @type {string}
     * @memberof GetUsers400Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface PostRallyRequest
 */
export interface PostRallyRequest {
    /**
     * 
     * @type {string}
     * @memberof PostRallyRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostRallyRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PostRallyStamp200Response
 */
export interface PostRallyStamp200Response {
    /**
     * 
     * @type {StampSchema}
     * @memberof PostRallyStamp200Response
     */
    'stamp'?: StampSchema;
}
/**
 * 
 * @export
 * @interface PostRallyStampRequest
 */
export interface PostRallyStampRequest {
    /**
     * 
     * @type {string}
     * @memberof PostRallyStampRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostRallyStampRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostRallyStampRequest
     */
    'qr_code'?: string;
}
/**
 * 
 * @export
 * @interface PostUserRegisterRequest
 */
export interface PostUserRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof PostUserRegisterRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostUserRegisterRequest
     */
    'rally_id'?: string;
}
/**
 * 
 * @export
 * @interface RallySchema
 */
export interface RallySchema {
    /**
     * 
     * @type {string}
     * @memberof RallySchema
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RallySchema
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RallySchema
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof RallySchema
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof RallySchema
     */
    'UpdatedAt'?: string;
}
/**
 * 
 * @export
 * @interface RallySchemaWithStamps
 */
export interface RallySchemaWithStamps {
    /**
     * 
     * @type {string}
     * @memberof RallySchemaWithStamps
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RallySchemaWithStamps
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof RallySchemaWithStamps
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof RallySchemaWithStamps
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof RallySchemaWithStamps
     */
    'UpdatedAt'?: string;
    /**
     * 
     * @type {Array<StampSchema>}
     * @memberof RallySchemaWithStamps
     */
    'stamps'?: Array<StampSchema>;
}
/**
 * 
 * @export
 * @interface StampSchema
 */
export interface StampSchema {
    /**
     * 
     * @type {string}
     * @memberof StampSchema
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof StampSchema
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof StampSchema
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof StampSchema
     */
    'qr_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof StampSchema
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof StampSchema
     */
    'UpdatedAt'?: string;
}
/**
 * 
 * @export
 * @interface UserSchema
 */
export interface UserSchema {
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'Id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'rally_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'CreatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'UpdatedAt'?: string;
}

/**
 * RallyApi - axios parameter creator
 * @export
 */
export const RallyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary スタンプラリーを削除する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRally: async (rallyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rallyId' is not null or undefined
            assertParamExists('deleteRally', 'rallyId', rallyId)
            const localVarPath = `/rallies/{rally_id}`
                .replace(`{${"rally_id"}}`, encodeURIComponent(String(rallyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタンプラリー一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRallies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rallies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタンプラリーを取得する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRally: async (rallyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rallyId' is not null or undefined
            assertParamExists('getRally', 'rallyId', rallyId)
            const localVarPath = `/rallies/{rally_id}`
                .replace(`{${"rally_id"}}`, encodeURIComponent(String(rallyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタンプラリーのスタンプ一覧を取得する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRallyStamps: async (rallyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rallyId' is not null or undefined
            assertParamExists('getRallyStamps', 'rallyId', rallyId)
            const localVarPath = `/rallies/{rally_id}/stamps`
                .replace(`{${"rally_id"}}`, encodeURIComponent(String(rallyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタンプラリーを作成する
         * @param {PostRallyRequest} postRallyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRally: async (postRallyRequest: PostRallyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRallyRequest' is not null or undefined
            assertParamExists('postRally', 'postRallyRequest', postRallyRequest)
            const localVarPath = `/rallies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRallyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタンプラリーにスタンプを追加する
         * @param {string} rallyId 
         * @param {PostRallyStampRequest} postRallyStampRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRallyStamp: async (rallyId: string, postRallyStampRequest: PostRallyStampRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rallyId' is not null or undefined
            assertParamExists('postRallyStamp', 'rallyId', rallyId)
            // verify required parameter 'postRallyStampRequest' is not null or undefined
            assertParamExists('postRallyStamp', 'postRallyStampRequest', postRallyStampRequest)
            const localVarPath = `/rallies/{rally_id}/stamps`
                .replace(`{${"rally_id"}}`, encodeURIComponent(String(rallyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRallyStampRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RallyApi - functional programming interface
 * @export
 */
export const RallyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RallyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary スタンプラリーを削除する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRally(rallyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRally(rallyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RallyApi.deleteRally']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary スタンプラリー一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRallies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RallySchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRallies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RallyApi.getRallies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary スタンプラリーを取得する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRally(rallyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RallySchemaWithStamps>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRally(rallyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RallyApi.getRally']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary スタンプラリーのスタンプ一覧を取得する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRallyStamps(rallyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StampSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRallyStamps(rallyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RallyApi.getRallyStamps']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary スタンプラリーを作成する
         * @param {PostRallyRequest} postRallyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRally(postRallyRequest: PostRallyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RallySchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRally(postRallyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RallyApi.postRally']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary スタンプラリーにスタンプを追加する
         * @param {string} rallyId 
         * @param {PostRallyStampRequest} postRallyStampRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRallyStamp(rallyId: string, postRallyStampRequest: PostRallyStampRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRallyStamp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRallyStamp(rallyId, postRallyStampRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RallyApi.postRallyStamp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RallyApi - factory interface
 * @export
 */
export const RallyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RallyApiFp(configuration)
    return {
        /**
         * 
         * @summary スタンプラリーを削除する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRally(rallyId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteUser200Response> {
            return localVarFp.deleteRally(rallyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタンプラリー一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRallies(options?: RawAxiosRequestConfig): AxiosPromise<Array<RallySchema>> {
            return localVarFp.getRallies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタンプラリーを取得する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRally(rallyId: string, options?: RawAxiosRequestConfig): AxiosPromise<RallySchemaWithStamps> {
            return localVarFp.getRally(rallyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタンプラリーのスタンプ一覧を取得する
         * @param {string} rallyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRallyStamps(rallyId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<StampSchema>> {
            return localVarFp.getRallyStamps(rallyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタンプラリーを作成する
         * @param {PostRallyRequest} postRallyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRally(postRallyRequest: PostRallyRequest, options?: RawAxiosRequestConfig): AxiosPromise<RallySchema> {
            return localVarFp.postRally(postRallyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタンプラリーにスタンプを追加する
         * @param {string} rallyId 
         * @param {PostRallyStampRequest} postRallyStampRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRallyStamp(rallyId: string, postRallyStampRequest: PostRallyStampRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostRallyStamp200Response> {
            return localVarFp.postRallyStamp(rallyId, postRallyStampRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RallyApi - object-oriented interface
 * @export
 * @class RallyApi
 * @extends {BaseAPI}
 */
export class RallyApi extends BaseAPI {
    /**
     * 
     * @summary スタンプラリーを削除する
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RallyApi
     */
    public deleteRally(rallyId: string, options?: RawAxiosRequestConfig) {
        return RallyApiFp(this.configuration).deleteRally(rallyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタンプラリー一覧を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RallyApi
     */
    public getRallies(options?: RawAxiosRequestConfig) {
        return RallyApiFp(this.configuration).getRallies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタンプラリーを取得する
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RallyApi
     */
    public getRally(rallyId: string, options?: RawAxiosRequestConfig) {
        return RallyApiFp(this.configuration).getRally(rallyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタンプラリーのスタンプ一覧を取得する
     * @param {string} rallyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RallyApi
     */
    public getRallyStamps(rallyId: string, options?: RawAxiosRequestConfig) {
        return RallyApiFp(this.configuration).getRallyStamps(rallyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタンプラリーを作成する
     * @param {PostRallyRequest} postRallyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RallyApi
     */
    public postRally(postRallyRequest: PostRallyRequest, options?: RawAxiosRequestConfig) {
        return RallyApiFp(this.configuration).postRally(postRallyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタンプラリーにスタンプを追加する
     * @param {string} rallyId 
     * @param {PostRallyStampRequest} postRallyStampRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RallyApi
     */
    public postRallyStamp(rallyId: string, postRallyStampRequest: PostRallyStampRequest, options?: RawAxiosRequestConfig) {
        return RallyApiFp(this.configuration).postRallyStamp(rallyId, postRallyStampRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StampApi - axios parameter creator
 * @export
 */
export const StampApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary スタンプを削除する
         * @param {string} stampId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStamp: async (stampId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stampId' is not null or undefined
            assertParamExists('deleteStamp', 'stampId', stampId)
            const localVarPath = `/stamp/{stamp_id}`
                .replace(`{${"stamp_id"}}`, encodeURIComponent(String(stampId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタンプを読み込む
         * @param {string} stampId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStampCollect: async (stampId: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stampId' is not null or undefined
            assertParamExists('postStampCollect', 'stampId', stampId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('postStampCollect', 'userId', userId)
            const localVarPath = `/stamp/{stamp_id}/collect/{user_id}`
                .replace(`{${"stamp_id"}}`, encodeURIComponent(String(stampId)))
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary スタンプを更新する
         * @param {string} stampId 
         * @param {PostRallyStampRequest} postRallyStampRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStamp: async (stampId: string, postRallyStampRequest: PostRallyStampRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stampId' is not null or undefined
            assertParamExists('putStamp', 'stampId', stampId)
            // verify required parameter 'postRallyStampRequest' is not null or undefined
            assertParamExists('putStamp', 'postRallyStampRequest', postRallyStampRequest)
            const localVarPath = `/stamp/{stamp_id}`
                .replace(`{${"stamp_id"}}`, encodeURIComponent(String(stampId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRallyStampRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StampApi - functional programming interface
 * @export
 */
export const StampApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StampApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary スタンプを削除する
         * @param {string} stampId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStamp(stampId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStamp(stampId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StampApi.deleteStamp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary スタンプを読み込む
         * @param {string} stampId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStampCollect(stampId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postStampCollect(stampId, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StampApi.postStampCollect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary スタンプを更新する
         * @param {string} stampId 
         * @param {PostRallyStampRequest} postRallyStampRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStamp(stampId: string, postRallyStampRequest: PostRallyStampRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putStamp(stampId, postRallyStampRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StampApi.putStamp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StampApi - factory interface
 * @export
 */
export const StampApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StampApiFp(configuration)
    return {
        /**
         * 
         * @summary スタンプを削除する
         * @param {string} stampId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStamp(stampId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteUser200Response> {
            return localVarFp.deleteStamp(stampId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタンプを読み込む
         * @param {string} stampId 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStampCollect(stampId: string, userId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteUser200Response> {
            return localVarFp.postStampCollect(stampId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary スタンプを更新する
         * @param {string} stampId 
         * @param {PostRallyStampRequest} postRallyStampRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStamp(stampId: string, postRallyStampRequest: PostRallyStampRequest, options?: RawAxiosRequestConfig): AxiosPromise<StampSchema> {
            return localVarFp.putStamp(stampId, postRallyStampRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StampApi - object-oriented interface
 * @export
 * @class StampApi
 * @extends {BaseAPI}
 */
export class StampApi extends BaseAPI {
    /**
     * 
     * @summary スタンプを削除する
     * @param {string} stampId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    public deleteStamp(stampId: string, options?: RawAxiosRequestConfig) {
        return StampApiFp(this.configuration).deleteStamp(stampId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタンプを読み込む
     * @param {string} stampId 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    public postStampCollect(stampId: string, userId: string, options?: RawAxiosRequestConfig) {
        return StampApiFp(this.configuration).postStampCollect(stampId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary スタンプを更新する
     * @param {string} stampId 
     * @param {PostRallyStampRequest} postRallyStampRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    public putStamp(stampId: string, postRallyStampRequest: PostRallyStampRequest, options?: RawAxiosRequestConfig) {
        return StampApiFp(this.configuration).putStamp(stampId, postRallyStampRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ユーザーを削除する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザーを取得する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザーのスタンプ一覧を取得する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStamps: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserStamps', 'userId', userId)
            const localVarPath = `/users/{user_id}/stamps`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザー一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザーを登録する
         * @param {PostUserRegisterRequest} postUserRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserRegister: async (postUserRegisterRequest: PostUserRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUserRegisterRequest' is not null or undefined
            assertParamExists('postUserRegister', 'postUserRegisterRequest', postUserRegisterRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUserRegisterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ユーザーを削除する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteUser200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ユーザーを取得する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ユーザーのスタンプ一覧を取得する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserStamps(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserStamps200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserStamps(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserStamps']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ユーザー一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ユーザーを登録する
         * @param {PostUserRegisterRequest} postUserRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserRegister(postUserRegisterRequest: PostUserRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postUserRegister(postUserRegisterRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.postUserRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary ユーザーを削除する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<DeleteUser200Response> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザーを取得する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<UserSchema> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザーのスタンプ一覧を取得する
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStamps(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GetUserStamps200ResponseInner>> {
            return localVarFp.getUserStamps(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザー一覧を取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserSchema>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザーを登録する
         * @param {PostUserRegisterRequest} postUserRegisterRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserRegister(postUserRegisterRequest: PostUserRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSchema> {
            return localVarFp.postUserRegister(postUserRegisterRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary ユーザーを削除する
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザーを取得する
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザーのスタンプ一覧を取得する
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserStamps(userId: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserStamps(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザー一覧を取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUsers(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザーを登録する
     * @param {PostUserRegisterRequest} postUserRegisterRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserRegister(postUserRegisterRequest: PostUserRegisterRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).postUserRegister(postUserRegisterRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



